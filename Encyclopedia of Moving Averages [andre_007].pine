// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// @version=4
// @author=andre_007

study(title="Encyclopedia of Moving Averages", shorttitle="Moving Averages", format=format.inherit, overlay=true, resolution="")

//-----------------------------------------------------------
// Type of Moving Averages
//-----------------------------------------------------------

var string SMA  = "Simple"
var string EMA  = "Exponential"
var string DEMA = "Double Exponential"
var string TEMA = "Triple Exponential"
var string WMA  = "Weighted"
var string SMMA = "Smoothed"
var string LSMA = "Least Squares"
var string HMA  = "Hull"
var string ALMA = "Arnaud Legoux"

//-----------------------------------------------------------
// Calculations
//-----------------------------------------------------------
var float calc_1 = na
var float calc_2 = na
var float calc_3 = na
var float calc_4 = na
var float calc_5 = na
var float calc_6 = na
var float calc_7 = na
var float calc_8 = na
var float calc_9 = na
var float calc_10 = na
var float calc_11 = na
var float calc_12 = na
var float calc_13 = na
var float calc_14 = na

//-----------------------------------------------------------
// Periods of Moving Averages
//-----------------------------------------------------------
var len_1 = 8
var len_2 = 13
var len_3 = 21
var len_4 = 34
var len_5 = 50
var len_6 = 80
var len_7 = 120
var len_8 = 160
var len_9 = 200
var len_10 = 240
var len_11 = 280
var len_12 = 320
var len_13 = 365
var len_14 = 730

//-----------------------------------------------------------
// Colors
//-----------------------------------------------------------
var color COLOR_BULL_01 = #3af13c
var color COLOR_BULL_02 = #00e85f
var color COLOR_BULL_03 = #00de7e
var color COLOR_BULL_04 = #00d39c
var color COLOR_BULL_05 = #00c7b6
var color COLOR_BULL_06 = #00bace
var color COLOR_BULL_07 = #00ace2
var color COLOR_BULL_08 = #009ef0
var color COLOR_BULL_09 = #0090f7
var color COLOR_BULL_10 = #0080f7
var color COLOR_BULL_11 = #006ff0
var color COLOR_BULL_12 = #005ce1
var color COLOR_BULL_13 = #0048cc
var color COLOR_BULL_14 = #002fb1

var color COLOR_BEAR_01 = #ce0000
var color COLOR_BEAR_02 = #d90019
var color COLOR_BEAR_03 = #e4002b
var color COLOR_BEAR_04 = #ed003d
var color COLOR_BEAR_05 = #f6004e
var color COLOR_BEAR_06 = #fd005f
var color COLOR_BEAR_07 = #ff0071
var color COLOR_BEAR_08 = #ff0084
var color COLOR_BEAR_09 = #ff0496
var color COLOR_BEAR_10 = #ff22a9
var color COLOR_BEAR_11 = #ff35bc
var color COLOR_BEAR_12 = #ff45cf
var color COLOR_BEAR_13 = #ff54e2
var color COLOR_BEAR_14 = #ff62f4

//-----------------------------------------------------------
// Params for all Moving Averages
//-----------------------------------------------------------
var string GROUP_ALL = "Params for all Moving Averages"
bool    i_same_params = input(title="Same parameters for all moving averages?", type=input.bool, defval=true, tooltip="Check this to apply same type, source and offset for all moving averages", inline="02" group=GROUP_ALL)
string  i_type_all    = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="03", group=GROUP_ALL)
float   i_src_all     = input(close, title="Source", inline="03", group=GROUP_ALL)
int     i_offset_all  = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="03", group=GROUP_ALL)
bool    i_fill        = input(title="Fill background between averages?", type=input.bool, defval=true, inline="03", group=GROUP_ALL)

//-----------------------------------------------------------
// Params for Arnaud Legoux Moving Average (ALMA)
//-----------------------------------------------------------
var string GROUP_ALMA = "Exclusive for Arnaud Legoux Moving Average (ALMA)"
alma_offset = input(title="Offset", type=input.float, defval=0.85, group=GROUP_ALMA, inline="04", tooltip="This offset is considered in the formula, not in the graphic! Offset is the Gaussian applied to the combo line and it is 0.85 by default. Setting offset at 1 makes it fully aligned to the current price just like the exponential moving average. While setting it to zero makes it just like a simple moving average. Traders may try offset combinations according to their own needs and preferences.")
alma_sigma = input(title="Sigma", type=input.float, defval=6, group=GROUP_ALMA, inline="04", tooltip="The standard deviation applied to the combo line. It makes the combo line sharper.")

//-----------------------------------------------------------
// Averages
//-----------------------------------------------------------
var string GROUP_AVG = "Moving Averages"

// ————— Average 1
bool    i_show_avg_1    = input(title="Moving Average 1", type=input.bool, defval=true, inline="10", group=GROUP_AVG)
color   i_color_1       = input(COLOR_BULL_01, "", inline="10", group=GROUP_AVG)
string  i_type_1        = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="11", group=GROUP_AVG)
int     i_length_1      = input(len_1, minval=1, title="Length", inline="11", group=GROUP_AVG)
float   i_src_1         = input(close, title="Source", inline="12", group=GROUP_AVG)
int     i_offset_1      = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="12", group=GROUP_AVG)

// ————— Average 2
bool    i_show_avg_2    = input(title="Moving Average 2", type=input.bool, defval=true, inline="13", group=GROUP_AVG)
color   i_color_2       = input(COLOR_BULL_02, "", inline="13", group=GROUP_AVG)
string  i_type_2        = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="14", group=GROUP_AVG)
int     i_length_2      = input(len_2, minval=1, title="Length", inline="14", group=GROUP_AVG)
float   i_src_2         = input(close, title="Source", inline="15", group=GROUP_AVG)
int     i_offset_2      = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="15", group=GROUP_AVG)

// ————— Average 3
bool    i_show_avg_3    = input(title="Moving Average 3", type=input.bool, defval=true, inline="16", group=GROUP_AVG)
color   i_color_3       = input(COLOR_BULL_03, "", inline="16", group=GROUP_AVG)
string  i_type_3        = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="17", group=GROUP_AVG)
int     i_length_3      = input(len_3, minval=1, title="Length", inline="17", group=GROUP_AVG)
float   i_src_3         = input(close, title="Source", inline="18", group=GROUP_AVG)
int     i_offset_3      = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="18", group=GROUP_AVG)

// ————— Average 4
bool    i_show_avg_4    = input(title="Moving Average 4", type=input.bool, defval=true, inline="19", group=GROUP_AVG)
color   i_color_4       = input(COLOR_BULL_04, "", inline="19", group=GROUP_AVG)
string  i_type_4        = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="20", group=GROUP_AVG)
int     i_length_4      = input(len_4, minval=1, title="Length", inline="20", group=GROUP_AVG)
float   i_src_4         = input(close, title="Source", inline="21", group=GROUP_AVG)
int     i_offset_4      = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="21", group=GROUP_AVG)

// ————— Average 5
bool    i_show_avg_5    = input(title="Moving Average 5", type=input.bool, defval=true, inline="22", group=GROUP_AVG)
color   i_color_5       = input(COLOR_BULL_05, "", inline="22", group=GROUP_AVG)
string  i_type_5        = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="23", group=GROUP_AVG)
int     i_length_5      = input(len_5, minval=1, title="Length", inline="23", group=GROUP_AVG)
float   i_src_5         = input(close, title="Source", inline="24", group=GROUP_AVG)
int     i_offset_5      = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="24", group=GROUP_AVG)

// ————— Average 6
bool    i_show_avg_6    = input(title="Moving Average 6", type=input.bool, defval=true, inline="25", group=GROUP_AVG)
color   i_color_6       = input(COLOR_BULL_06, "", inline="25", group=GROUP_AVG)
string  i_type_6        = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="26", group=GROUP_AVG)
int     i_length_6      = input(len_6, minval=1, title="Length", inline="26", group=GROUP_AVG)
float   i_src_6         = input(close, title="Source", inline="27", group=GROUP_AVG)
int     i_offset_6      = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="27", group=GROUP_AVG)

// ————— Average 7
bool    i_show_avg_7    = input(title="Moving Average 7", type=input.bool, defval=true, inline="28", group=GROUP_AVG)
color   i_color_7       = input(COLOR_BULL_07, "", inline="28", group=GROUP_AVG)
string  i_type_7        = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="29", group=GROUP_AVG)
int     i_length_7      = input(len_7, minval=1, title="Length", inline="29", group=GROUP_AVG)
float   i_src_7         = input(close, title="Source", inline="30", group=GROUP_AVG)
int     i_offset_7      = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="30", group=GROUP_AVG)

// ————— Average 8
bool    i_show_avg_8    = input(title="Moving Average 8", type=input.bool, defval=true, inline="31", group=GROUP_AVG)
color   i_color_8       = input(COLOR_BULL_08, "", inline="31", group=GROUP_AVG)
string  i_type_8        = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="32", group=GROUP_AVG)
int     i_length_8      = input(len_8, minval=1, title="Length", inline="32", group=GROUP_AVG)
float   i_src_8         = input(close, title="Source", inline="33", group=GROUP_AVG)
int     i_offset_8      = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="33", group=GROUP_AVG)

// ————— Average 9
bool    i_show_avg_9    = input(title="Moving Average 9", type=input.bool, defval=true, inline="34", group=GROUP_AVG)
color   i_color_9       = input(COLOR_BULL_09, "", inline="34", group=GROUP_AVG)
string  i_type_9        = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="35", group=GROUP_AVG)
int     i_length_9      = input(len_9, minval=1, title="Length", inline="35", group=GROUP_AVG)
float   i_src_9         = input(close, title="Source", inline="36", group=GROUP_AVG)
int     i_offset_9      = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="36", group=GROUP_AVG)

// ————— Average 10
bool    i_show_avg_10   = input(title="Moving Average 10", type=input.bool, defval=true, inline="37", group=GROUP_AVG)
color   i_color_10      = input(COLOR_BULL_10, "", inline="37", group=GROUP_AVG)
string  i_type_10       = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="38", group=GROUP_AVG)
int     i_length_10     = input(len_10, minval=1, title="Length", inline="38", group=GROUP_AVG)
float   i_src_10        = input(close, title="Source", inline="39", group=GROUP_AVG)
int     i_offset_10     = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="39", group=GROUP_AVG)

// ————— Average 11
bool    i_show_avg_11   = input(title="Moving Average 11", type=input.bool, defval=true, inline="40", group=GROUP_AVG)
color   i_color_11      = input(COLOR_BULL_11, "", inline="40", group=GROUP_AVG)
string  i_type_11       = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="41", group=GROUP_AVG)
int     i_length_11     = input(len_11, minval=1, title="Length", inline="41", group=GROUP_AVG)
float   i_src_11        = input(close, title="Source", inline="42", group=GROUP_AVG)
int     i_offset_11     = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="42", group=GROUP_AVG)

// ————— Average 12
bool    i_show_avg_12   = input(title="Moving Average 12", type=input.bool, defval=true, inline="43", group=GROUP_AVG)
color   i_color_12      = input(COLOR_BULL_12, "", inline="43", group=GROUP_AVG)
string  i_type_12       = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="44", group=GROUP_AVG)
int     i_length_12     = input(len_12, minval=1, title="Length", inline="44", group=GROUP_AVG)
float   i_src_12        = input(close, title="Source", inline="45", group=GROUP_AVG)
int     i_offset_12     = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="45", group=GROUP_AVG)

// ————— Average 13
bool    i_show_avg_13   = input(title="Moving Average 13", type=input.bool, defval=true, inline="46", group=GROUP_AVG)
color   i_color_13      = input(COLOR_BULL_13, "", inline="46", group=GROUP_AVG)
string  i_type_13       = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="47", group=GROUP_AVG)
int     i_length_13     = input(len_13, minval=1, title="Length", inline="47", group=GROUP_AVG)
float   i_src_13        = input(close, title="Source", inline="48", group=GROUP_AVG)
int     i_offset_13     = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="48", group=GROUP_AVG)

// ————— Average 14
bool    i_show_avg_14   = input(title="Moving Average 14", type=input.bool, defval=true, inline="49", group=GROUP_AVG)
color   i_color_14      = input(COLOR_BULL_14, "", inline="49", group=GROUP_AVG)
string  i_type_14       = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="50", group=GROUP_AVG)
int     i_length_14     = input(len_14, minval=1, title="Length", inline="50", group=GROUP_AVG)
float   i_src_14        = input(close, title="Source", inline="51", group=GROUP_AVG)
int     i_offset_14     = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="51", group=GROUP_AVG)

//-----------------------------------------------------------
// Functions
//-----------------------------------------------------------
f_sma(_src, _len) =>
    out = sma(_src, _len)

f_ema(_src, _len) =>
    out = ema(_src, _len)

f_dema(_src, _len) =>
    e1 = ema(_src, _len)
    e2 = ema(e1, _len)
    out = 2 * e1 - e2

f_tema(_src, _len) =>
    ema1 = ema(_src, _len)
    ema2 = ema(ema1, _len)
    ema3 = ema(ema2, _len)
    out = 3 * (ema1 - ema2) + ema3

f_wma(_src, _len) =>
    out = wma(_src, _len)

f_smma(_src, _len) =>
    smma = 0.0
    smma := na(smma[1]) ? sma(src, len) : (smma[1] * (len - 1) + src) / len

f_lsma(_src, _len) =>
    out = linreg(_src, _len, 0)

f_hullma(_src, _len) =>
    out = wma(2*wma(_src, _len/2)-wma(_src, _len), floor(sqrt(_len)))

f_alma(_src, _len) =>
    out = alma(_src, _len, alma_offset, alma_sigma))

f_average(_type, _src, _len) =>
    if _type == SMA
        f_sma(_src, _len)
    else if _type == EMA
        f_ema(_src, _len)
    else if _type == DEMA
        f_dema(_src, _len)
    else if _type == TEMA
        f_tema(_src, _len)
    else if _type == WMA
        f_wma(_src, _len)
    else if _type == SMMA
        f_smma(_src, _len)      
    else if _type == LSMA
        f_lsma(_src, _len)
    else if _type == HMA
        f_hma(_src, _len)
    else if _type == ALMA
        f_alma(_src, _len)

f_apply_type(_type) =>
    type_out = i_same_params ? i_type_all : _type

f_apply_src(_src) =>
    src_out = i_same_params ? i_src_all : _src

f_apply_offset(_offset) =>
    offset_out = i_same_params ? i_offset_all : _offset

//-----------------------------------------------------------
// Calculations
//-----------------------------------------------------------
if i_show_avg_1
    calc_1  := f_average( f_apply_type(i_type_1), f_apply_src(i_src_1), i_length_1 )
if i_show_avg_2
    calc_2  := f_average( f_apply_type(i_type_2), f_apply_src(i_src_2), i_length_2 )
if i_show_avg_3
    calc_3  := f_average( f_apply_type(i_type_3), f_apply_src(i_src_3), i_length_3 )
if i_show_avg_4
    calc_4  := f_average( f_apply_type(i_type_4), f_apply_src(i_src_4), i_length_4 )
if i_show_avg_5
    calc_5  := f_average( f_apply_type(i_type_5), f_apply_src(i_src_5), i_length_5 )
if i_show_avg_6
    calc_6  := f_average( f_apply_type(i_type_6), f_apply_src(i_src_6), i_length_6 )
if i_show_avg_7
    calc_7  := f_average( f_apply_type(i_type_7), f_apply_src(i_src_7), i_length_7 )    
if i_show_avg_8
    calc_8  := f_average( f_apply_type(i_type_8), f_apply_src(i_src_8), i_length_8 )    
if i_show_avg_9
    calc_9 := f_average( f_apply_type(i_type_9), f_apply_src(i_src_9), i_length_9 )    
if i_show_avg_10
    calc_10 := f_average( f_apply_type(i_type_10), f_apply_src(i_src_10), i_length_10 )
if i_show_avg_11
    calc_11 := f_average( f_apply_type(i_type_11), f_apply_src(i_src_11), i_length_11 )    
if i_show_avg_12
    calc_12 := f_average( f_apply_type(i_type_12), f_apply_src(i_src_12), i_length_12 )    
if i_show_avg_13
    calc_13 := f_average( f_apply_type(i_type_13), f_apply_src(i_src_13), i_length_13 )    
if i_show_avg_14
    calc_14 := f_average( f_apply_type(i_type_14), f_apply_src(i_src_14), i_length_14 )     

//-----------------------------------------------------------
// Plots
//-----------------------------------------------------------
plot_1  = plot( calc_1,  color=close>=calc_1  ? COLOR_BULL_01 : COLOR_BEAR_01, offset=f_apply_offset(i_offset_1),  linewidth=1 )
plot_2  = plot( calc_2,  color=close>=calc_2  ? COLOR_BULL_02 : COLOR_BEAR_02, offset=f_apply_offset(i_offset_2),  linewidth=1 )
plot_3  = plot( calc_3,  color=close>=calc_3  ? COLOR_BULL_03 : COLOR_BEAR_03, offset=f_apply_offset(i_offset_3),  linewidth=1 )
plot_4  = plot( calc_4,  color=close>=calc_4  ? COLOR_BULL_04 : COLOR_BEAR_04, offset=f_apply_offset(i_offset_4),  linewidth=1 )
plot_5  = plot( calc_5,  color=close>=calc_5  ? COLOR_BULL_05 : COLOR_BEAR_05, offset=f_apply_offset(i_offset_5),  linewidth=1 )
plot_6  = plot( calc_6,  color=close>=calc_6  ? COLOR_BULL_06 : COLOR_BEAR_06, offset=f_apply_offset(i_offset_6),  linewidth=1 )
plot_7  = plot( calc_7,  color=close>=calc_7  ? COLOR_BULL_07 : COLOR_BEAR_07, offset=f_apply_offset(i_offset_7),  linewidth=1 )
plot_8  = plot( calc_8,  color=close>=calc_8  ? COLOR_BULL_08 : COLOR_BEAR_08, offset=f_apply_offset(i_offset_8),  linewidth=1 )
plot_9  = plot( calc_9,  color=close>=calc_9  ? COLOR_BULL_09 : COLOR_BEAR_09, offset=f_apply_offset(i_offset_9),  linewidth=1 )
plot_10 = plot( calc_10, color=close>=calc_10 ? COLOR_BULL_10 : COLOR_BEAR_10, offset=f_apply_offset(i_offset_10), linewidth=1 )
plot_11 = plot( calc_11, color=close>=calc_11 ? COLOR_BULL_11 : COLOR_BEAR_11, offset=f_apply_offset(i_offset_11), linewidth=1 )
plot_12 = plot( calc_12, color=close>=calc_12 ? COLOR_BULL_12 : COLOR_BEAR_12, offset=f_apply_offset(i_offset_12), linewidth=1 )
plot_13 = plot( calc_13, color=close>=calc_13 ? COLOR_BULL_13 : COLOR_BEAR_13, offset=f_apply_offset(i_offset_13), linewidth=1 )
plot_14 = plot( calc_14, color=close>=calc_14 ? COLOR_BULL_14 : COLOR_BEAR_14, offset=f_apply_offset(i_offset_14), linewidth=1 )

//-----------------------------------------------------------
// Fills
//-----------------------------------------------------------
fill(plot_1,  plot_2,  color=i_fill ? (color.new(calc_1 > calc_2   ? COLOR_BULL_01 : COLOR_BEAR_02, 90)) : na )
fill(plot_2,  plot_3,  color=i_fill ? (color.new(calc_2 > calc_3   ? COLOR_BULL_02 : COLOR_BEAR_03, 90)) : na )
fill(plot_3,  plot_4,  color=i_fill ? (color.new(calc_3 > calc_4   ? COLOR_BULL_03 : COLOR_BEAR_04, 90)) : na )
fill(plot_4,  plot_5,  color=i_fill ? (color.new(calc_4 > calc_5   ? COLOR_BULL_04 : COLOR_BEAR_05, 90)) : na )
fill(plot_5,  plot_6,  color=i_fill ? (color.new(calc_5 > calc_6   ? COLOR_BULL_05 : COLOR_BEAR_06, 90)) : na )
fill(plot_6,  plot_7,  color=i_fill ? (color.new(calc_6 > calc_7   ? COLOR_BULL_06 : COLOR_BEAR_07, 90)) : na )
fill(plot_7,  plot_8,  color=i_fill ? (color.new(calc_7 > calc_8   ? COLOR_BULL_07 : COLOR_BEAR_08, 90)) : na )
fill(plot_8,  plot_9,  color=i_fill ? (color.new(calc_8 > calc_9   ? COLOR_BULL_08 : COLOR_BEAR_09, 90)) : na )
fill(plot_9,  plot_10, color=i_fill ? (color.new(calc_9 > calc_10  ? COLOR_BULL_09 : COLOR_BEAR_10, 90)) : na )
fill(plot_10, plot_11, color=i_fill ? (color.new(calc_10 > calc_11 ? COLOR_BULL_10 : COLOR_BEAR_11, 90)) : na )
fill(plot_11, plot_12, color=i_fill ? (color.new(calc_11 > calc_12 ? COLOR_BULL_11 : COLOR_BEAR_12, 90)) : na )
fill(plot_12, plot_13, color=i_fill ? (color.new(calc_12 > calc_13 ? COLOR_BULL_12 : COLOR_BEAR_13, 90)) : na )
fill(plot_13, plot_14, color=i_fill ? (color.new(calc_13 > calc_14 ? COLOR_BULL_13 : COLOR_BEAR_14, 90)) : na )