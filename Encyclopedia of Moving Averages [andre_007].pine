// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © andre_007

//@version=4
study(title="Encyclopedia of Moving Averages", shorttitle="Moving Averages", overlay=true, resolution="")

// ————— Input options for Averages

var string SMA  = "Simple"
var string EMA  = "Exponential"
var string DEMA = "Double Exponential"
var string TEMA = "Triple Exponential"
var string WMA  = "Weighted"
var string SMMA = "Smoothed"
var string LSMA = "Least Squares"
var string HMA  = "Hull"
var string ALMA = "Arnaud Legoux"

// ————— Calcs
var float calc_1 = na
float calc_2 = na
float calc_3 = na
float calc_4 = na
float calc_5 = na
float calc_6 = na
float calc_7 = na
float calc_8 = na
float calc_9 = na
float calc_10 = na
float calc_11 = na
float calc_12 = na
float calc_13 = na
float calc_14 = na
float calc_15 = na
float calc_16 = na
float calc_17 = na
float calc_18 = na
float calc_19 = na
float calc_20 = na
float calc_21 = na
float calc_22 = na
float calc_23 = na
float calc_24 = na

// ————— Periods
var len_1 = 5
var len_2 = 8
var len_3 = 13
var len_4 = 17
var len_5 = 21
var len_6 = 29
var len_7 = 34
var len_8 = 41
var len_9 = 50
var len_10 = 61
var len_11 = 70
var len_12 = 80
var len_13 = 90
var len_14 = 100
var len_15 = 120
var len_16 = 144
var len_17 = 160
var len_18 = 180
var len_19 = 200
var len_20 = 233
var len_21 = 250
var len_22 = 365
var len_23 = 377
var len_24 = 610

// ————— Colors
var color color_01  = #29ee24
var color color_02  = #00e83d
var color color_03  = #00e24e
var color color_04  = #00dc5d
var color color_05  = #00d569
var color color_06  = #00ce74
var color color_07  = #00c77d
var color color_08  = #00c085
var color color_09  = #00b98b
var color color_10  = #00b291
var color color_11  = #00aa95
var color color_12  = #00a397
var color color_13  = #009b98
var color color_14  = #009398
var color color_15  = #008c97
var color color_16  = #008494
var color color_17  = #007c90
var color color_18  = #00748b
var color color_19  = #006d85
var color color_20  = #00657d
var color color_21  = #005e75
var color color_22  = #0c566c
var color color_23  = #204f62
var color color_24  = #2a4858

// ————— Params for all Moving Averages
bool    i_same_avg    = input(title="Apply same type for all moving averages?", type=input.bool, defval=true, inline="08", tooltip="If checked, individual types don't take effect")
string  i_type_all    = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="09")


// ————— Averages
var string GROUP_AVG = "Moving Averages"

// ————— Average 1
bool    i_show_avg_1    = input(title="Moving Average 1", type=input.bool, defval=true, inline="10", group=GROUP_AVG)
color   i_color_1       = input(color_01, "", inline="10", group=GROUP_AVG)
string  i_type_1        = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="11", group=GROUP_AVG)
int     i_length_1      = input(len_1, minval=1, title="Length", inline="11", group=GROUP_AVG)
float   i_src_1         = input(close, title="Source", inline="12", group=GROUP_AVG)
int     i_offset_1      = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="12", group=GROUP_AVG)

// ————— Average 2
bool    i_show_avg_2    = input(title="Moving Average 2", type=input.bool, defval=true, inline="13", group=GROUP_AVG)
color   i_color_2       = input(color_02, "", inline="13", group=GROUP_AVG)
string  i_type_2        = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="14", group=GROUP_AVG)
int     i_length_2      = input(len_2, minval=1, title="Length", inline="14", group=GROUP_AVG)
float   i_src_2         = input(close, title="Source", inline="15", group=GROUP_AVG)
int     i_offset_2      = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="15", group=GROUP_AVG)

// ————— Average 3
bool    i_show_avg_3    = input(title="Moving Average 3", type=input.bool, defval=true, inline="16", group=GROUP_AVG)
color   i_color_3       = input(color_03, "", inline="16", group=GROUP_AVG)
string  i_type_3        = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="17", group=GROUP_AVG)
int     i_length_3      = input(len_3, minval=1, title="Length", inline="17", group=GROUP_AVG)
float   i_src_3         = input(close, title="Source", inline="18", group=GROUP_AVG)
int     i_offset_3      = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="18", group=GROUP_AVG)

// ————— Average 4
bool    i_show_avg_4    = input(title="Moving Average 4", type=input.bool, defval=true, inline="19", group=GROUP_AVG)
color   i_color_4       = input(color_04, "", inline="19", group=GROUP_AVG)
string  i_type_4        = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="20", group=GROUP_AVG)
int     i_length_4      = input(len_4, minval=1, title="Length", inline="20", group=GROUP_AVG)
float   i_src_4         = input(close, title="Source", inline="21", group=GROUP_AVG)
int     i_offset_4      = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="21", group=GROUP_AVG)

// ————— Average 5
bool    i_show_avg_5    = input(title="Moving Average 5", type=input.bool, defval=true, inline="22", group=GROUP_AVG)
color   i_color_5       = input(color_05, "", inline="22", group=GROUP_AVG)
string  i_type_5        = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="23", group=GROUP_AVG)
int     i_length_5      = input(len_5, minval=1, title="Length", inline="23", group=GROUP_AVG)
float   i_src_5         = input(close, title="Source", inline="24", group=GROUP_AVG)
int     i_offset_5      = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="24", group=GROUP_AVG)

// ————— Average 6
bool    i_show_avg_6    = input(title="Moving Average 6", type=input.bool, defval=true, inline="25", group=GROUP_AVG)
color   i_color_6       = input(color_06, "", inline="25", group=GROUP_AVG)
string  i_type_6        = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="26", group=GROUP_AVG)
int     i_length_6      = input(len_6, minval=1, title="Length", inline="26", group=GROUP_AVG)
float   i_src_6         = input(close, title="Source", inline="27", group=GROUP_AVG)
int     i_offset_6      = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="27", group=GROUP_AVG)

// ————— Average 7
bool    i_show_avg_7    = input(title="Moving Average 7", type=input.bool, defval=true, inline="28", group=GROUP_AVG)
color   i_color_7       = input(color_07, "", inline="28", group=GROUP_AVG)
string  i_type_7        = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="29", group=GROUP_AVG)
int     i_length_7      = input(len_7, minval=1, title="Length", inline="29", group=GROUP_AVG)
float   i_src_7         = input(close, title="Source", inline="30", group=GROUP_AVG)
int     i_offset_7      = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="30", group=GROUP_AVG)

// ————— Average 8
bool    i_show_avg_8    = input(title="Moving Average 8", type=input.bool, defval=true, inline="31", group=GROUP_AVG)
color   i_color_8       = input(color_08, "", inline="31", group=GROUP_AVG)
string  i_type_8        = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="32", group=GROUP_AVG)
int     i_length_8      = input(len_8, minval=1, title="Length", inline="32", group=GROUP_AVG)
float   i_src_8         = input(close, title="Source", inline="33", group=GROUP_AVG)
int     i_offset_8      = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="33", group=GROUP_AVG)

// ————— Average 9
bool    i_show_avg_9    = input(title="Moving Average 9", type=input.bool, defval=true, inline="34", group=GROUP_AVG)
color   i_color_9       = input(color_09, "", inline="34", group=GROUP_AVG)
string  i_type_9        = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="35", group=GROUP_AVG)
int     i_length_9      = input(len_9, minval=1, title="Length", inline="35", group=GROUP_AVG)
float   i_src_9         = input(close, title="Source", inline="36", group=GROUP_AVG)
int     i_offset_9      = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="36", group=GROUP_AVG)

// ————— Average 10
bool    i_show_avg_10   = input(title="Moving Average 10", type=input.bool, defval=true, inline="37", group=GROUP_AVG)
color   i_color_10      = input(color_10, "", inline="37", group=GROUP_AVG)
string  i_type_10       = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="38", group=GROUP_AVG)
int     i_length_10     = input(len_10, minval=1, title="Length", inline="38", group=GROUP_AVG)
float   i_src_10        = input(close, title="Source", inline="39", group=GROUP_AVG)
int     i_offset_10     = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="39", group=GROUP_AVG)

// ————— Average 11
bool    i_show_avg_11   = input(title="Moving Average 11", type=input.bool, defval=true, inline="40", group=GROUP_AVG)
color   i_color_11      = input(color_11, "", inline="40", group=GROUP_AVG)
string  i_type_11       = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="41", group=GROUP_AVG)
int     i_length_11     = input(len_11, minval=1, title="Length", inline="41", group=GROUP_AVG)
float   i_src_11        = input(close, title="Source", inline="42", group=GROUP_AVG)
int     i_offset_11     = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="42", group=GROUP_AVG)

// ————— Average 12
bool    i_show_avg_12   = input(title="Moving Average 12", type=input.bool, defval=true, inline="43", group=GROUP_AVG)
color   i_color_12      = input(color_12, "", inline="43", group=GROUP_AVG)
string  i_type_12       = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="44", group=GROUP_AVG)
int     i_length_12     = input(len_12, minval=1, title="Length", inline="44", group=GROUP_AVG)
float   i_src_12        = input(close, title="Source", inline="45", group=GROUP_AVG)
int     i_offset_12     = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="45", group=GROUP_AVG)

// ————— Average 13
bool    i_show_avg_13   = input(title="Moving Average 13", type=input.bool, defval=true, inline="46", group=GROUP_AVG)
color   i_color_13      = input(color_13, "", inline="46", group=GROUP_AVG)
string  i_type_13       = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="47", group=GROUP_AVG)
int     i_length_13     = input(len_13, minval=1, title="Length", inline="47", group=GROUP_AVG)
float   i_src_13        = input(close, title="Source", inline="48", group=GROUP_AVG)
int     i_offset_13     = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="48", group=GROUP_AVG)

// ————— Average 14
bool    i_show_avg_14   = input(title="Moving Average 14", type=input.bool, defval=true, inline="49", group=GROUP_AVG)
color   i_color_14      = input(color_14, "", inline="49", group=GROUP_AVG)
string  i_type_14       = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="50", group=GROUP_AVG)
int     i_length_14     = input(len_14, minval=1, title="Length", inline="50", group=GROUP_AVG)
float   i_src_14        = input(close, title="Source", inline="51", group=GROUP_AVG)
int     i_offset_14     = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="51", group=GROUP_AVG)

// ————— Average 15
bool    i_show_avg_15   = input(title="Moving Average 15", type=input.bool, defval=true, inline="52", group=GROUP_AVG)
color   i_color_15      = input(color_15, "", inline="52", group=GROUP_AVG)
string  i_type_15       = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="53", group=GROUP_AVG)
int     i_length_15     = input(len_15, minval=1, title="Length", inline="53", group=GROUP_AVG)
float   i_src_15        = input(close, title="Source", inline="54", group=GROUP_AVG)
int     i_offset_15     = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="54", group=GROUP_AVG)

// ————— Average 16
bool    i_show_avg_16   = input(title="Moving Average 16", type=input.bool, defval=true, inline="55", group=GROUP_AVG)
color   i_color_16      = input(color_16, "", inline="55", group=GROUP_AVG)
string  i_type_16       = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="56", group=GROUP_AVG)
int     i_length_16     = input(len_16, minval=1, title="Length", inline="56", group=GROUP_AVG)
float   i_src_16        = input(close, title="Source", inline="57", group=GROUP_AVG)
int     i_offset_16     = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="57", group=GROUP_AVG)

// ————— Functions

f_sma(_src, _len) =>
    out = sma(_src, _len)

f_ema(_src, _len) =>
    out = ema(_src, _len)

f_dema(_src, _len) =>
    e1 = ema(_src, _len)
    e2 = ema(e1, _len)
    out = 2 * e1 - e2

f_tema(_src, _len) =>
    ema1 = ema(_src, _len)
    ema2 = ema(ema1, _len)
    ema3 = ema(ema2, _len)
    out = 3 * (ema1 - ema2) + ema3

f_wma(_src, _len) =>
    out = wma(_src, _len)

f_average(_type, _src, _len) =>
    if _type == SMA
        f_sma(_src, _len)
    else if _type == EMA
        f_ema(_src, _len)
    else if _type == DEMA
        f_dema(_src, _len)
    else if _type == TEMA
        f_tema(_src, _len)
    else if _type == WMA
        f_wma(_src, _len)

// ————— Main


if i_show_avg_1
    calc_1 := f_average(i_same_avg ? i_type_all : i_type_1, i_src_1, i_length_1)

plot_1 = plot( calc_1, color=close >= f_average(i_same_avg ? i_type_all : i_type_1, i_src_1, i_length_1) ? i_color_1 : color.red, offset=i_offset_1 )
plot( i_show_avg_2 ? f_average(i_same_avg ? i_type_all : i_type_2, i_src_2, i_length_2) : na, color=i_color_2, offset=i_offset_2 )
plot( i_show_avg_3 ? f_average(i_same_avg ? i_type_all : i_type_3, i_src_3, i_length_3) : na, color=i_color_3, offset=i_offset_3 )
plot( i_show_avg_4 ? f_average(i_same_avg ? i_type_all : i_type_4, i_src_4, i_length_4) : na, color=i_color_4, offset=i_offset_4 )
plot( i_show_avg_5 ? f_average(i_same_avg ? i_type_all : i_type_5, i_src_5, i_length_5) : na, color=i_color_5, offset=i_offset_5 )
plot( i_show_avg_6 ? f_average(i_same_avg ? i_type_all : i_type_6, i_src_6, i_length_6) : na, color=i_color_6, offset=i_offset_6 )
plot( i_show_avg_7 ? f_average(i_same_avg ? i_type_all : i_type_7, i_src_7, i_length_7) : na, color=i_color_7, offset=i_offset_7 )
plot( i_show_avg_8 ? f_average(i_same_avg ? i_type_all : i_type_8, i_src_8, i_length_8) : na, color=i_color_8, offset=i_offset_8 )
plot( i_show_avg_9 ? f_average(i_same_avg ? i_type_all : i_type_9, i_src_9, i_length_9) : na, color=i_color_9, offset=i_offset_9 )
plot( i_show_avg_10 ? f_average(i_same_avg ? i_type_all : i_type_10, i_src_10, i_length_10) : na, color=i_color_10, offset=i_offset_10 )
plot( i_show_avg_11 ? f_average(i_same_avg ? i_type_all : i_type_11, i_src_11, i_length_11) : na, color=i_color_11, offset=i_offset_11 )
plot( i_show_avg_12 ? f_average(i_same_avg ? i_type_all : i_type_12, i_src_12, i_length_12) : na, color=i_color_12, offset=i_offset_12 )
plot( i_show_avg_13 ? f_average(i_same_avg ? i_type_all : i_type_13, i_src_13, i_length_13) : na, color=i_color_13, offset=i_offset_13 )
plot( i_show_avg_14 ? f_average(i_same_avg ? i_type_all : i_type_14, i_src_14, i_length_14) : na, color=i_color_14, offset=i_offset_14 )
plot( i_show_avg_15 ? f_average(i_same_avg ? i_type_all : i_type_15, i_src_15, i_length_15) : na, color=i_color_15, offset=i_offset_15 )

if i_show_avg_16
    calc_16 := f_average(i_same_avg ? i_type_all : i_type_1, i_src_16, i_length_16)

plot_16 = plot( i_show_avg_16 ? f_average(i_same_avg ? i_type_all : i_type_16, i_src_16, i_length_16) : na, color=close >= f_average(i_same_avg ? i_type_all : i_type_16, i_src_16, i_length_16) ?  i_color_16 : color.red, offset=i_offset_16 )

fill(plot_1, plot_16, color = color.new(calc_1 > calc_16 ? i_color_1 : i_color_16, 80) )

// study(title="Smoothed Moving Average", shorttitle="SMMA", overlay=true, resolution="")
// len = input(7, minval=1, title="Length")
// src = input(close, title="Source")
// smma = 0.0
// smma := na(smma[1]) ? sma(src, len) : (smma[1] * (len - 1) + src) / len
// plot(smma, color=color.red)

// study(title = "Least Squares Moving Average", shorttitle="LSMA", overlay=true, resolution="")
// length = input(title="Length", type=input.integer, defval=25)
// offset = input(title="Offset", type=input.integer, defval=0)
// src = input(close, title="Source")
// lsma = linreg(src, length, offset)
// plot(lsma)

// study(title="Hull Moving Average", shorttitle="HMA", overlay=true, resolution="")
// length = input(9, minval=1)
// src = input(close, title="Source")
// hullma = wma(2*wma(src, length/2)-wma(src, length), floor(sqrt(length)))
// plot(hullma)

// study(title = "Arnaud Legoux Moving Average", shorttitle="ALMA", overlay=true, resolution="")
// source = close
// windowsize = input(title="Window Size", type=input.integer, defval=9)
// offset = input(title="Offset", type=input.float, defval=0.85)
// sigma = input(title="Sigma", type=input.float, defval=6)
// plot(alma(source, windowsize, offset, sigma))

// study(title = "Least Squares Moving Average", shorttitle="LSMA", overlay=true, resolution="")
// length = input(title="Length", type=input.integer, defval=25)
// offset = input(title="Offset", type=input.integer, defval=0)
// src = input(close, title="Source")
// lsma = linreg(src, length, offset)
// plot(lsma)