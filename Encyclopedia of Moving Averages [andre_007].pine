// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// @version=4
// @author=andre_007

study(title="Encyclopedia of Moving Averages", shorttitle="Moving Averages", format=format.inherit, overlay=true, resolution="")

// ————— Input options for Averages

var string SMA  = "Simple"
var string EMA  = "Exponential"
var string DEMA = "Double Exponential"
var string TEMA = "Triple Exponential"
var string WMA  = "Weighted"
var string SMMA = "Smoothed"
var string LSMA = "Least Squares"
var string HMA  = "Hull"
var string ALMA = "Arnaud Legoux"

// ————— Calcs
var float calc_1 = na
var float calc_2 = na
var float calc_3 = na
var float calc_4 = na
var float calc_5 = na
var float calc_6 = na
var float calc_7 = na
var float calc_8 = na
var float calc_9 = na
var float calc_10 = na
var float calc_11 = na
var float calc_12 = na
var float calc_13 = na
var float calc_14 = na
var float calc_15 = na
var float calc_16 = na
var float calc_17 = na
var float calc_18 = na
var float calc_19 = na
var float calc_20 = na
var float calc_21 = na
var float calc_22 = na
var float calc_23 = na
var float calc_24 = na

// ————— Periods
var len_1 = 5
var len_2 = 8
var len_3 = 13
var len_4 = 17
var len_5 = 21
var len_6 = 29
var len_7 = 34
var len_8 = 41
var len_9 = 50
var len_10 = 61
var len_11 = 70
var len_12 = 80
var len_13 = 90
var len_14 = 100
var len_15 = 120
var len_16 = 144
var len_17 = 160
var len_18 = 180
var len_19 = 200
var len_20 = 233
var len_21 = 250
var len_22 = 365
var len_23 = 377
var len_24 = 610

// ————— Colors
var a_colors_bull = array.new_color(24)
var a_colors_bear = array.new_color(24)

array.set(a_colors_bull,  0, color.new(#b9f2a6, 0))
array.set(a_colors_bull,  1, color.new(#96ec79, 0))
array.set(a_colors_bull,  2, color.new(#73e64c, 0))
array.set(a_colors_bull,  3, color.new(#50df20, 0))
array.set(a_colors_bull,  4, color.new(#40b319, 0))
array.set(a_colors_bull,  5, color.new(#308613, 0))
array.set(a_colors_bull,  6, color.new(#a6f2f2, 0))
array.set(a_colors_bull,  7, color.new(#79ecec, 0))
array.set(a_colors_bull,  8, color.new(#4ce6e6, 0))
array.set(a_colors_bull,  9, color.new(#20dfdf, 0))
array.set(a_colors_bull, 10, color.new(#19b3b3, 0))
array.set(a_colors_bull, 11, color.new(#138686, 0))
array.set(a_colors_bull, 12, color.new(#cce0ff, 0))
array.set(a_colors_bull, 13, color.new(#99c2ff, 0))
array.set(a_colors_bull, 14, color.new(#66a3ff, 0))
array.set(a_colors_bull, 15, color.new(#3385ff, 0))
array.set(a_colors_bull, 16, color.new(#0066ff, 0))
array.set(a_colors_bull, 17, color.new(#0052cc, 0))
array.set(a_colors_bull, 18, color.new(#ffccff, 0))
array.set(a_colors_bull, 19, color.new(#ff99ff, 0))
array.set(a_colors_bull, 20, color.new(#ff66ff, 0))
array.set(a_colors_bull, 21, color.new(#ff33ff, 0))
array.set(a_colors_bull, 22, color.new(#ff00ff, 0))
array.set(a_colors_bull, 23, color.new(#cc00cc, 0))

array.set(a_colors_bear,  0, color.new(#ffff80, 0))
array.set(a_colors_bear,  1, color.new(#ffff4d, 0))
array.set(a_colors_bear,  2, color.new(#ffff1a, 0))
array.set(a_colors_bear,  3, color.new(#cccc00, 0))
array.set(a_colors_bear,  4, color.new(#999900, 0))
array.set(a_colors_bear,  5, color.new(#666600, 0))
array.set(a_colors_bear,  6, color.new(#ffcc99, 0))
array.set(a_colors_bear,  7, color.new(#ffa64d, 0))
array.set(a_colors_bear,  8, color.new(#ff8000, 0))
array.set(a_colors_bear,  9, color.new(#b35900, 0))
array.set(a_colors_bear, 10, color.new(#994d00, 0))
array.set(a_colors_bear, 11, color.new(#663300, 0))
array.set(a_colors_bear, 12, color.new(#ffb3b3, 0))
array.set(a_colors_bear, 13, color.new(#ff8566, 0))
array.set(a_colors_bear, 14, color.new(#ff5c33, 0))
array.set(a_colors_bear, 15, color.new(#ff3300, 0))
array.set(a_colors_bear, 16, color.new(#cc2900, 0))
array.set(a_colors_bear, 17, color.new(#990000, 0))
array.set(a_colors_bear, 18, color.new(#e6ccff, 0))
array.set(a_colors_bear, 19, color.new(#cc99ff, 0))
array.set(a_colors_bear, 20, color.new(#a64dff, 0))
array.set(a_colors_bear, 21, color.new(#8000ff, 0))
array.set(a_colors_bear, 22, color.new(#5900b3, 0))
array.set(a_colors_bear, 23, color.new(#400080, 0))

var color COLOR_BULL_01 = #b9f2a6
var color COLOR_BULL_02 = #96ec79
var color COLOR_BULL_03 = #73e64c
var color COLOR_BULL_04 = #50df20
var color COLOR_BULL_05 = #40b319
var color COLOR_BULL_06 = #308613
var color COLOR_BULL_07 = #a6f2f2
var color COLOR_BULL_08 = #79ecec
var color COLOR_BULL_09 = #4ce6e6
var color COLOR_BULL_10 = #20dfdf
var color COLOR_BULL_11 = #19b3b3
var color COLOR_BULL_12 = #138686
var color COLOR_BULL_13 = #cce0ff
var color COLOR_BULL_14 = #99c2ff
var color COLOR_BULL_15 = #66a3ff
var color COLOR_BULL_16 = #3385ff
var color COLOR_BULL_17 = #0066ff
var color COLOR_BULL_18 = #0052cc
var color COLOR_BULL_19 = #ffccff
var color COLOR_BULL_20 = #ff99ff
var color COLOR_BULL_21 = #ff66ff
var color COLOR_BULL_22 = #ff33ff
var color COLOR_BULL_23 = #ff00ff
var color COLOR_BULL_24 = #cc00cc

// ————— Params for all Moving Averages
bool    i_same_avg    = input(title="Apply same type for all moving averages?", type=input.bool, defval=true, inline="08", tooltip="If checked, individual types don't take effect")
string  i_type_all    = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="09")


// ————— Averages
var string GROUP_AVG = "Moving Averages"

// ————— Average 1
bool    i_show_avg_1    = input(title="Moving Average 1", type=input.bool, defval=true, inline="10", group=GROUP_AVG)
color   i_color_1       = input(COLOR_BULL_01, "", inline="10", group=GROUP_AVG)
string  i_type_1        = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="11", group=GROUP_AVG)
int     i_length_1      = input(len_1, minval=1, title="Length", inline="11", group=GROUP_AVG)
float   i_src_1         = input(close, title="Source", inline="12", group=GROUP_AVG)
int     i_offset_1      = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="12", group=GROUP_AVG)

// ————— Average 2
bool    i_show_avg_2    = input(title="Moving Average 2", type=input.bool, defval=true, inline="13", group=GROUP_AVG)
color   i_color_2       = input(COLOR_BULL_02, "", inline="13", group=GROUP_AVG)
string  i_type_2        = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="14", group=GROUP_AVG)
int     i_length_2      = input(len_2, minval=1, title="Length", inline="14", group=GROUP_AVG)
float   i_src_2         = input(close, title="Source", inline="15", group=GROUP_AVG)
int     i_offset_2      = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="15", group=GROUP_AVG)

// ————— Average 3
bool    i_show_avg_3    = input(title="Moving Average 3", type=input.bool, defval=true, inline="16", group=GROUP_AVG)
color   i_color_3       = input(COLOR_BULL_03, "", inline="16", group=GROUP_AVG)
string  i_type_3        = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="17", group=GROUP_AVG)
int     i_length_3      = input(len_3, minval=1, title="Length", inline="17", group=GROUP_AVG)
float   i_src_3         = input(close, title="Source", inline="18", group=GROUP_AVG)
int     i_offset_3      = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="18", group=GROUP_AVG)

// ————— Average 4
bool    i_show_avg_4    = input(title="Moving Average 4", type=input.bool, defval=true, inline="19", group=GROUP_AVG)
color   i_color_4       = input(COLOR_BULL_04, "", inline="19", group=GROUP_AVG)
string  i_type_4        = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="20", group=GROUP_AVG)
int     i_length_4      = input(len_4, minval=1, title="Length", inline="20", group=GROUP_AVG)
float   i_src_4         = input(close, title="Source", inline="21", group=GROUP_AVG)
int     i_offset_4      = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="21", group=GROUP_AVG)

// ————— Average 5
bool    i_show_avg_5    = input(title="Moving Average 5", type=input.bool, defval=true, inline="22", group=GROUP_AVG)
color   i_color_5       = input(COLOR_BULL_05, "", inline="22", group=GROUP_AVG)
string  i_type_5        = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="23", group=GROUP_AVG)
int     i_length_5      = input(len_5, minval=1, title="Length", inline="23", group=GROUP_AVG)
float   i_src_5         = input(close, title="Source", inline="24", group=GROUP_AVG)
int     i_offset_5      = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="24", group=GROUP_AVG)

// ————— Average 6
bool    i_show_avg_6    = input(title="Moving Average 6", type=input.bool, defval=true, inline="25", group=GROUP_AVG)
color   i_color_6       = input(COLOR_BULL_06, "", inline="25", group=GROUP_AVG)
string  i_type_6        = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="26", group=GROUP_AVG)
int     i_length_6      = input(len_6, minval=1, title="Length", inline="26", group=GROUP_AVG)
float   i_src_6         = input(close, title="Source", inline="27", group=GROUP_AVG)
int     i_offset_6      = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="27", group=GROUP_AVG)

// ————— Average 7
bool    i_show_avg_7    = input(title="Moving Average 7", type=input.bool, defval=true, inline="28", group=GROUP_AVG)
color   i_color_7       = input(COLOR_BULL_07, "", inline="28", group=GROUP_AVG)
string  i_type_7        = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="29", group=GROUP_AVG)
int     i_length_7      = input(len_7, minval=1, title="Length", inline="29", group=GROUP_AVG)
float   i_src_7         = input(close, title="Source", inline="30", group=GROUP_AVG)
int     i_offset_7      = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="30", group=GROUP_AVG)

// ————— Average 8
bool    i_show_avg_8    = input(title="Moving Average 8", type=input.bool, defval=true, inline="31", group=GROUP_AVG)
color   i_color_8       = input(COLOR_BULL_08, "", inline="31", group=GROUP_AVG)
string  i_type_8        = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="32", group=GROUP_AVG)
int     i_length_8      = input(len_8, minval=1, title="Length", inline="32", group=GROUP_AVG)
float   i_src_8         = input(close, title="Source", inline="33", group=GROUP_AVG)
int     i_offset_8      = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="33", group=GROUP_AVG)

// ————— Average 9
bool    i_show_avg_9    = input(title="Moving Average 9", type=input.bool, defval=true, inline="34", group=GROUP_AVG)
color   i_color_9       = input(COLOR_BULL_09, "", inline="34", group=GROUP_AVG)
string  i_type_9        = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="35", group=GROUP_AVG)
int     i_length_9      = input(len_9, minval=1, title="Length", inline="35", group=GROUP_AVG)
float   i_src_9         = input(close, title="Source", inline="36", group=GROUP_AVG)
int     i_offset_9      = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="36", group=GROUP_AVG)

// ————— Average 10
bool    i_show_avg_10   = input(title="Moving Average 10", type=input.bool, defval=true, inline="37", group=GROUP_AVG)
color   i_color_10      = input(COLOR_BULL_10, "", inline="37", group=GROUP_AVG)
string  i_type_10       = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="38", group=GROUP_AVG)
int     i_length_10     = input(len_10, minval=1, title="Length", inline="38", group=GROUP_AVG)
float   i_src_10        = input(close, title="Source", inline="39", group=GROUP_AVG)
int     i_offset_10     = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="39", group=GROUP_AVG)

// ————— Average 11
bool    i_show_avg_11   = input(title="Moving Average 11", type=input.bool, defval=true, inline="40", group=GROUP_AVG)
color   i_color_11      = input(COLOR_BULL_11, "", inline="40", group=GROUP_AVG)
string  i_type_11       = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="41", group=GROUP_AVG)
int     i_length_11     = input(len_11, minval=1, title="Length", inline="41", group=GROUP_AVG)
float   i_src_11        = input(close, title="Source", inline="42", group=GROUP_AVG)
int     i_offset_11     = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="42", group=GROUP_AVG)

// ————— Average 12
bool    i_show_avg_12   = input(title="Moving Average 12", type=input.bool, defval=true, inline="43", group=GROUP_AVG)
color   i_color_12      = input(COLOR_BULL_12, "", inline="43", group=GROUP_AVG)
string  i_type_12       = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="44", group=GROUP_AVG)
int     i_length_12     = input(len_12, minval=1, title="Length", inline="44", group=GROUP_AVG)
float   i_src_12        = input(close, title="Source", inline="45", group=GROUP_AVG)
int     i_offset_12     = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="45", group=GROUP_AVG)

// ————— Average 13
bool    i_show_avg_13   = input(title="Moving Average 13", type=input.bool, defval=true, inline="46", group=GROUP_AVG)
color   i_color_13      = input(COLOR_BULL_13, "", inline="46", group=GROUP_AVG)
string  i_type_13       = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="47", group=GROUP_AVG)
int     i_length_13     = input(len_13, minval=1, title="Length", inline="47", group=GROUP_AVG)
float   i_src_13        = input(close, title="Source", inline="48", group=GROUP_AVG)
int     i_offset_13     = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="48", group=GROUP_AVG)

// ————— Average 14
bool    i_show_avg_14   = input(title="Moving Average 14", type=input.bool, defval=true, inline="49", group=GROUP_AVG)
color   i_color_14      = input(COLOR_BULL_14, "", inline="49", group=GROUP_AVG)
string  i_type_14       = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="50", group=GROUP_AVG)
int     i_length_14     = input(len_14, minval=1, title="Length", inline="50", group=GROUP_AVG)
float   i_src_14        = input(close, title="Source", inline="51", group=GROUP_AVG)
int     i_offset_14     = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="51", group=GROUP_AVG)

// ————— Average 15
bool    i_show_avg_15   = input(title="Moving Average 15", type=input.bool, defval=true, inline="52", group=GROUP_AVG)
color   i_color_15      = input(COLOR_BULL_15, "", inline="52", group=GROUP_AVG)
string  i_type_15       = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="53", group=GROUP_AVG)
int     i_length_15     = input(len_15, minval=1, title="Length", inline="53", group=GROUP_AVG)
float   i_src_15        = input(close, title="Source", inline="54", group=GROUP_AVG)
int     i_offset_15     = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="54", group=GROUP_AVG)

// ————— Average 16
bool    i_show_avg_16   = input(title="Moving Average 16", type=input.bool, defval=true, inline="55", group=GROUP_AVG)
color   i_color_16      = input(COLOR_BULL_16, "", inline="55", group=GROUP_AVG)
string  i_type_16       = input(SMA, "Type", options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline="56", group=GROUP_AVG)
int     i_length_16     = input(len_16, minval=1, title="Length", inline="56", group=GROUP_AVG)
float   i_src_16        = input(close, title="Source", inline="57", group=GROUP_AVG)
int     i_offset_16     = input(title="Offset", type=input.integer, defval=0, minval=-500, maxval=500, inline="57", group=GROUP_AVG)

// ————— Functions

f_sma(_src, _len) =>
    out = sma(_src, _len)

f_ema(_src, _len) =>
    out = ema(_src, _len)

f_dema(_src, _len) =>
    e1 = ema(_src, _len)
    e2 = ema(e1, _len)
    out = 2 * e1 - e2

f_tema(_src, _len) =>
    ema1 = ema(_src, _len)
    ema2 = ema(ema1, _len)
    ema3 = ema(ema2, _len)
    out = 3 * (ema1 - ema2) + ema3

f_wma(_src, _len) =>
    out = wma(_src, _len)

f_average(_type, _src, _len) =>
    if _type == SMA
        f_sma(_src, _len)
    else if _type == EMA
        f_ema(_src, _len)
    else if _type == DEMA
        f_dema(_src, _len)
    else if _type == TEMA
        f_tema(_src, _len)
    else if _type == WMA
        f_wma(_src, _len)

// ————— Main


if i_show_avg_1
    calc_1 := f_average(i_same_avg ? i_type_all : i_type_1, i_src_1, i_length_1)
if i_show_avg_2
    calc_2 := f_average(i_same_avg ? i_type_all : i_type_2, i_src_2, i_length_2)
if i_show_avg_3
    calc_3 := f_average(i_same_avg ? i_type_all : i_type_3, i_src_3, i_length_3)
if i_show_avg_4
    calc_4 := f_average(i_same_avg ? i_type_all : i_type_4, i_src_4, i_length_4)
if i_show_avg_5
    calc_5 := f_average(i_same_avg ? i_type_all : i_type_5, i_src_5, i_length_5)
if i_show_avg_6
    calc_6 := f_average(i_same_avg ? i_type_all : i_type_6, i_src_6, i_length_6)
if i_show_avg_7
    calc_7 := f_average(i_same_avg ? i_type_all : i_type_7, i_src_7, i_length_7)    
if i_show_avg_8
    calc_8 := f_average(i_same_avg ? i_type_all : i_type_8, i_src_8, i_length_8)    
if i_show_avg_9
    calc_9 := f_average(i_same_avg ? i_type_all : i_type_9, i_src_9, i_length_9)    
if i_show_avg_10
    calc_10 := f_average(i_same_avg ? i_type_all : i_type_10, i_src_10, i_length_10)
if i_show_avg_11
    calc_11 := f_average(i_same_avg ? i_type_all : i_type_11, i_src_11, i_length_11)    
if i_show_avg_12
    calc_12 := f_average(i_same_avg ? i_type_all : i_type_12, i_src_12, i_length_12)    
if i_show_avg_13
    calc_13 := f_average(i_same_avg ? i_type_all : i_type_13, i_src_13, i_length_13)    
if i_show_avg_14
    calc_14 := f_average(i_same_avg ? i_type_all : i_type_14, i_src_14, i_length_14)    
if i_show_avg_15
    calc_15 := f_average(i_same_avg ? i_type_all : i_type_15, i_src_15, i_length_15)    
if i_show_avg_16
    calc_16 := f_average(i_same_avg ? i_type_all : i_type_1, i_src_16, i_length_16)    

plot_1  = plot( calc_1,  color=close>=calc_1  ? array.get(a_colors_bull, 0)  : array.get(a_colors_bear, 0),  offset=i_offset_1 )
plot_2  = plot( calc_2,  color=close>=calc_2  ? array.get(a_colors_bull, 1)  : array.get(a_colors_bear, 1),  offset=i_offset_2 )
plot_3  = plot( calc_3,  color=close>=calc_3  ? array.get(a_colors_bull, 2)  : array.get(a_colors_bear, 2),  offset=i_offset_3 )
plot_4  = plot( calc_4,  color=close>=calc_4  ? array.get(a_colors_bull, 3)  : array.get(a_colors_bear, 3),  offset=i_offset_4 )
plot_5  = plot( calc_5,  color=close>=calc_5  ? array.get(a_colors_bull, 4)  : array.get(a_colors_bear, 4),  offset=i_offset_5 )
plot_6  = plot( calc_6,  color=close>=calc_6  ? array.get(a_colors_bull, 5)  : array.get(a_colors_bear, 5),  offset=i_offset_6 )
plot_7  = plot( calc_7,  color=close>=calc_7  ? array.get(a_colors_bull, 6)  : array.get(a_colors_bear, 6),  offset=i_offset_7 )
plot_8  = plot( calc_8,  color=close>=calc_8  ? array.get(a_colors_bull, 7)  : array.get(a_colors_bear, 7),  offset=i_offset_8 )
plot_9  = plot( calc_9,  color=close>=calc_9  ? array.get(a_colors_bull, 8)  : array.get(a_colors_bear, 8),  offset=i_offset_9 )
plot_10 = plot( calc_10, color=close>=calc_10 ? array.get(a_colors_bull, 9)  : array.get(a_colors_bear, 9),  offset=i_offset_10 )
plot_11 = plot( calc_11, color=close>=calc_11 ? array.get(a_colors_bull, 10) : array.get(a_colors_bear, 10), offset=i_offset_11 )
plot_12 = plot( calc_12, color=close>=calc_12 ? array.get(a_colors_bull, 11) : array.get(a_colors_bear, 11), offset=i_offset_12 )
plot_13 = plot( calc_13, color=close>=calc_13 ? array.get(a_colors_bull, 12) : array.get(a_colors_bear, 12), offset=i_offset_13 )
plot_14 = plot( calc_14, color=close>=calc_14 ? array.get(a_colors_bull, 13) : array.get(a_colors_bear, 13), offset=i_offset_14 )
plot_15 = plot( calc_15, color=close>=calc_15 ? array.get(a_colors_bull, 14) : array.get(a_colors_bear, 14), offset=i_offset_15 )
plot_16 = plot( calc_16, color=close>=calc_16 ? array.get(a_colors_bull, 15) : array.get(a_colors_bear, 15), offset=i_offset_16 )

fill(plot_1,  plot_2,  color = color.new(calc_1 > calc_2   ? array.get(a_colors_bull, 0)  : array.get(a_colors_bear, 0),  30) )
fill(plot_2,  plot_3,  color = color.new(calc_2 > calc_3   ? array.get(a_colors_bull, 1)  : array.get(a_colors_bear, 1),  35) )
fill(plot_3,  plot_4,  color = color.new(calc_3 > calc_4   ? array.get(a_colors_bull, 2)  : array.get(a_colors_bear, 2),  40) )
fill(plot_4,  plot_5,  color = color.new(calc_4 > calc_5   ? array.get(a_colors_bull, 3)  : array.get(a_colors_bear, 3),  45) )
fill(plot_5,  plot_6,  color = color.new(calc_5 > calc_6   ? array.get(a_colors_bull, 4)  : array.get(a_colors_bear, 4),  50) )
fill(plot_6,  plot_7,  color = color.new(calc_6 > calc_7   ? array.get(a_colors_bull, 5)  : array.get(a_colors_bear, 5),  55) )
fill(plot_7,  plot_8,  color = color.new(calc_7 > calc_8   ? array.get(a_colors_bull, 6)  : array.get(a_colors_bear, 6),  60) )
fill(plot_8,  plot_9,  color = color.new(calc_8 > calc_9   ? array.get(a_colors_bull, 7)  : array.get(a_colors_bear, 7),  65) )
fill(plot_9,  plot_10, color = color.new(calc_9 > calc_10  ? array.get(a_colors_bull, 8)  : array.get(a_colors_bear, 8),  70) )
fill(plot_10, plot_11, color = color.new(calc_10 > calc_11 ? array.get(a_colors_bull, 9)  : array.get(a_colors_bear, 9),  70) )
fill(plot_11, plot_12, color = color.new(calc_11 > calc_12 ? array.get(a_colors_bull, 10) : array.get(a_colors_bear, 10), 70) )
fill(plot_12, plot_13, color = color.new(calc_12 > calc_13 ? array.get(a_colors_bull, 11) : array.get(a_colors_bear, 11), 70) )
fill(plot_13, plot_14, color = color.new(calc_13 > calc_14 ? array.get(a_colors_bull, 12) : array.get(a_colors_bear, 12), 70) )
fill(plot_14, plot_15, color = color.new(calc_14 > calc_15 ? array.get(a_colors_bull, 13) : array.get(a_colors_bear, 13), 70) )
fill(plot_15, plot_16, color = color.new(calc_15 > calc_16 ? array.get(a_colors_bull, 14) : array.get(a_colors_bear, 14), 70) )


// study(title="Smoothed Moving Average", shorttitle="SMMA", overlay=true, resolution="")
// len = input(7, minval=1, title="Length")
// src = input(close, title="Source")
// smma = 0.0
// smma := na(smma[1]) ? sma(src, len) : (smma[1] * (len - 1) + src) / len
// plot(smma, color=color.red)

// study(title = "Least Squares Moving Average", shorttitle="LSMA", overlay=true, resolution="")
// length = input(title="Length", type=input.integer, defval=25)
// offset = input(title="Offset", type=input.integer, defval=0)
// src = input(close, title="Source")
// lsma = linreg(src, length, offset)
// plot(lsma)

// study(title="Hull Moving Average", shorttitle="HMA", overlay=true, resolution="")
// length = input(9, minval=1)
// src = input(close, title="Source")
// hullma = wma(2*wma(src, length/2)-wma(src, length), floor(sqrt(length)))
// plot(hullma)

// study(title = "Arnaud Legoux Moving Average", shorttitle="ALMA", overlay=true, resolution="")
// source = close
// windowsize = input(title="Window Size", type=input.integer, defval=9)
// offset = input(title="Offset", type=input.float, defval=0.85)
// sigma = input(title="Sigma", type=input.float, defval=6)
// plot(alma(source, windowsize, offset, sigma))

// study(title = "Least Squares Moving Average", shorttitle="LSMA", overlay=true, resolution="")
// length = input(title="Length", type=input.integer, defval=25)
// offset = input(title="Offset", type=input.integer, defval=0)
// src = input(close, title="Source")
// lsma = linreg(src, length, offset)
// plot(lsma)