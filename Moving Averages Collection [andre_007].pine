//@version=5
// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// @author=andre_007
//
// Last updated: 08-september-2021

indicator(title='Moving Averages Collection', shorttitle='Moving Averages Collection', format=format.inherit, overlay=true, timeframe='')

//-----------------------------------------------------------
// Type of Moving Averages
//-----------------------------------------------------------

var string SMA = 'Simple'
var string EMA = 'Exponential'
var string DEMA = 'Double Exponential'
var string TEMA = 'Triple Exponential'
var string WMA = 'Weighted'
var string SMMA = 'Smoothed'
var string LSMA = 'Least Squares'
var string HMA = 'Hull'
var string ALMA = 'Arnaud Legoux'

//-----------------------------------------------------------
// Calculations
//-----------------------------------------------------------
var float calc_1 = na
var float calc_2 = na
var float calc_3 = na
var float calc_4 = na
var float calc_5 = na
var float calc_6 = na
var float calc_7 = na
var float calc_8 = na
var float calc_9 = na
var float calc_10 = na

//-----------------------------------------------------------
// Periods of Moving Averages
//-----------------------------------------------------------
var len_1 = 8
var len_2 = 13
var len_3 = 21
var len_4 = 34
var len_5 = 55
var len_6 = 89
var len_7 = 144
var len_8 = 233
var len_9 = 377
var len_10 = 610

//-----------------------------------------------------------
// Colors
//-----------------------------------------------------------
var color COLOR_BULL_01 = #3af13c
var color COLOR_BULL_02 = #00e85f
var color COLOR_BULL_03 = #00de7e
var color COLOR_BULL_04 = #00d39c
var color COLOR_BULL_05 = #00c7b6
var color COLOR_BULL_06 = #00bace
var color COLOR_BULL_07 = #00ace2
var color COLOR_BULL_08 = #009ef0
var color COLOR_BULL_09 = #0090f7
var color COLOR_BULL_10 = #0080f7

var color COLOR_BEAR_01 = #ce0000
var color COLOR_BEAR_02 = #d90019
var color COLOR_BEAR_03 = #e4002b
var color COLOR_BEAR_04 = #ed003d
var color COLOR_BEAR_05 = #f6004e
var color COLOR_BEAR_06 = #fd005f
var color COLOR_BEAR_07 = #ff0071
var color COLOR_BEAR_08 = #ff0084
var color COLOR_BEAR_09 = #ff0496
var color COLOR_BEAR_10 = #ff22a9

//-----------------------------------------------------------
// Params for all Moving Averages
//-----------------------------------------------------------
var string GROUP_ALL = 'Params for all Moving Averages'
bool i_same_params = input.bool(title='Same parameters for all moving averages?', defval=true, tooltip='Check this to apply same type, source and offset for all moving averages', inline='02', group=GROUP_ALL)
string i_type_all = input.string(SMA, 'Type', options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline='03', group=GROUP_ALL)
float i_src_all = input.source(close, title='Source', inline='03', group=GROUP_ALL)
int i_offset_all = input.int(title='Offset', defval=0, minval=-500, maxval=500, inline='03', group=GROUP_ALL)
bool i_fill = input.bool(title='Fill background between averages?', defval=true, inline='03', group=GROUP_ALL)

//-----------------------------------------------------------
// Params for Arnaud Legoux Moving Average (ALMA)
//-----------------------------------------------------------
var string GROUP_ALMA = 'Exclusive for Arnaud Legoux Moving Average (ALMA)'
alma_offset = input.float(title='Offset', defval=0.85, group=GROUP_ALMA, inline='04', tooltip='This offset is considered in the formula, not in the graphic! Offset is the Gaussian applied to the combo line and it is 0.85 by default. Setting offset at 1 makes it fully aligned to the current price just like the exponential moving average. While setting it to zero makes it just like a simple moving average. Traders may try offset combinations according to their own needs and preferences.')
alma_sigma = input.float(title='Sigma', defval=6, group=GROUP_ALMA, inline='04', tooltip='The standard deviation applied to the combo line. It makes the combo line sharper.')

//-----------------------------------------------------------
// Averages
//-----------------------------------------------------------
var string GROUP_AVG = 'Moving Averages'

// ————— Average 1
bool i_show_avg_1 = input.bool(title='Moving Average 1', defval=true, inline='10', group=GROUP_AVG)
color i_color_bull_1 = input.color(COLOR_BULL_01, '', inline='10', group=GROUP_AVG)
color i_color_bear_1 = input.color(COLOR_BEAR_01, '', inline='10', group=GROUP_AVG)
string i_type_1 = input.string(SMA, 'Type', options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline='11', group=GROUP_AVG)
int i_length_1 = input.int(len_1, minval=1, title='Length', inline='11', group=GROUP_AVG)
float i_src_1 = input.source(close, title='Source', inline='12', group=GROUP_AVG)
int i_offset_1 = input.int(title='Offset', defval=0, minval=-500, maxval=500, inline='12', group=GROUP_AVG)

// ————— Average 2
bool i_show_avg_2 = input.bool(title='Moving Average 2', defval=true, inline='13', group=GROUP_AVG)
color i_color_bull_2 = input.color(COLOR_BULL_02, '', inline='13', group=GROUP_AVG)
color i_color_bear_2 = input.color(COLOR_BEAR_02, '', inline='13', group=GROUP_AVG)
string i_type_2 = input.string(SMA, 'Type', options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline='14', group=GROUP_AVG)
int i_length_2 = input.int(len_2, minval=1, title='Length', inline='14', group=GROUP_AVG)
float i_src_2 = input.source(close, title='Source', inline='15', group=GROUP_AVG)
int i_offset_2 = input.int(title='Offset', defval=0, minval=-500, maxval=500, inline='15', group=GROUP_AVG)

// ————— Average 3
bool i_show_avg_3 = input.bool(title='Moving Average 3', defval=true, inline='16', group=GROUP_AVG)
color i_color_bull_3 = input.color(COLOR_BULL_03, '', inline='16', group=GROUP_AVG)
color i_color_bear_3 = input.color(COLOR_BEAR_03, '', inline='16', group=GROUP_AVG)
string i_type_3 = input.string(SMA, 'Type', options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline='17', group=GROUP_AVG)
int i_length_3 = input.int(len_3, minval=1, title='Length', inline='17', group=GROUP_AVG)
float i_src_3 = input.source(close, title='Source', inline='18', group=GROUP_AVG)
int i_offset_3 = input.int(title='Offset', defval=0, minval=-500, maxval=500, inline='18', group=GROUP_AVG)

// ————— Average 4
bool i_show_avg_4 = input.bool(title='Moving Average 4', defval=true, inline='19', group=GROUP_AVG)
color i_color_bull_4 = input.color(COLOR_BULL_04, '', inline='19', group=GROUP_AVG)
color i_color_bear_4 = input.color(COLOR_BEAR_04, '', inline='19', group=GROUP_AVG)
string i_type_4 = input.string(SMA, 'Type', options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline='20', group=GROUP_AVG)
int i_length_4 = input.int(len_4, minval=1, title='Length', inline='20', group=GROUP_AVG)
float i_src_4 = input.source(close, title='Source', inline='21', group=GROUP_AVG)
int i_offset_4 = input.int(title='Offset', defval=0, minval=-500, maxval=500, inline='21', group=GROUP_AVG)

// ————— Average 5
bool i_show_avg_5 = input.bool(title='Moving Average 5', defval=true, inline='22', group=GROUP_AVG)
color i_color_bull_5 = input.color(COLOR_BULL_05, '', inline='22', group=GROUP_AVG)
color i_color_bear_5 = input.color(COLOR_BEAR_05, '', inline='22', group=GROUP_AVG)
string i_type_5 = input.string(SMA, 'Type', options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline='23', group=GROUP_AVG)
int i_length_5 = input.int(len_5, minval=1, title='Length', inline='23', group=GROUP_AVG)
float i_src_5 = input.source(close, title='Source', inline='24', group=GROUP_AVG)
int i_offset_5 = input.int(title='Offset', defval=0, minval=-500, maxval=500, inline='24', group=GROUP_AVG)

// ————— Average 6
bool i_show_avg_6 = input.bool(title='Moving Average 6', defval=true, inline='25', group=GROUP_AVG)
color i_color_bull_6 = input.color(COLOR_BULL_06, '', inline='25', group=GROUP_AVG)
color i_color_bear_6 = input.color(COLOR_BEAR_06, '', inline='25', group=GROUP_AVG)
string i_type_6 = input.string(SMA, 'Type', options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline='26', group=GROUP_AVG)
int i_length_6 = input.int(len_6, minval=1, title='Length', inline='26', group=GROUP_AVG)
float i_src_6 = input.source(close, title='Source', inline='27', group=GROUP_AVG)
int i_offset_6 = input.int(title='Offset', defval=0, minval=-500, maxval=500, inline='27', group=GROUP_AVG)

// ————— Average 7
bool i_show_avg_7 = input.bool(title='Moving Average 7', defval=true, inline='28', group=GROUP_AVG)
color i_color_bull_7 = input.color(COLOR_BULL_07, '', inline='28', group=GROUP_AVG)
color i_color_bear_7 = input.color(COLOR_BEAR_07, '', inline='28', group=GROUP_AVG)
string i_type_7 = input.string(SMA, 'Type', options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline='29', group=GROUP_AVG)
int i_length_7 = input.int(len_7, minval=1, title='Length', inline='29', group=GROUP_AVG)
float i_src_7 = input.source(close, title='Source', inline='30', group=GROUP_AVG)
int i_offset_7 = input.int(title='Offset', defval=0, minval=-500, maxval=500, inline='30', group=GROUP_AVG)

// ————— Average 8
bool i_show_avg_8 = input.bool(title='Moving Average 8', defval=true, inline='31', group=GROUP_AVG)
color i_color_bull_8 = input.color(COLOR_BULL_08, '', inline='31', group=GROUP_AVG)
color i_color_bear_8 = input.color(COLOR_BEAR_08, '', inline='31', group=GROUP_AVG)
string i_type_8 = input.string(SMA, 'Type', options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline='32', group=GROUP_AVG)
int i_length_8 = input.int(len_8, minval=1, title='Length', inline='32', group=GROUP_AVG)
float i_src_8 = input.source(close, title='Source', inline='33', group=GROUP_AVG)
int i_offset_8 = input.int(title='Offset', defval=0, minval=-500, maxval=500, inline='33', group=GROUP_AVG)

// ————— Average 9
bool i_show_avg_9 = input.bool(title='Moving Average 9', defval=true, inline='34', group=GROUP_AVG)
color i_color_bull_9 = input.color(COLOR_BULL_09, '', inline='34', group=GROUP_AVG)
color i_color_bear_9 = input.color(COLOR_BEAR_09, '', inline='34', group=GROUP_AVG)
string i_type_9 = input.string(SMA, 'Type', options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline='35', group=GROUP_AVG)
int i_length_9 = input.int(len_9, minval=1, title='Length', inline='35', group=GROUP_AVG)
float i_src_9 = input.source(close, title='Source', inline='36', group=GROUP_AVG)
int i_offset_9 = input.int(title='Offset', defval=0, minval=-500, maxval=500, inline='36', group=GROUP_AVG)

// ————— Average 10
bool i_show_avg_10 = input.bool(title='Moving Average 10', defval=true, inline='37', group=GROUP_AVG)
color i_color_bull_10 = input.color(COLOR_BULL_10, '', inline='37', group=GROUP_AVG)
color i_color_bear_10 = input.color(COLOR_BEAR_10, '', inline='37', group=GROUP_AVG)
string i_type_10 = input.string(SMA, 'Type', options=[SMA, EMA, DEMA, TEMA, WMA, SMMA, LSMA, HMA, ALMA], inline='38', group=GROUP_AVG)
int i_length_10 = input.int(len_10, minval=1, title='Length', inline='38', group=GROUP_AVG)
float i_src_10 = input.source(close, title='Source', inline='39', group=GROUP_AVG)
int i_offset_10 = input.int(title='Offset', defval=0, minval=-500, maxval=500, inline='39', group=GROUP_AVG)

//-----------------------------------------------------------
// Functions
//-----------------------------------------------------------
f_sma(_src, _len) =>
    out = ta.sma(_src, _len)
    out

f_ema(_src, _len) =>
    out = ta.ema(_src, _len)
    out

f_dema(_src, _len) =>
    e1 = ta.ema(_src, _len)
    e2 = ta.ema(e1, _len)
    out = 2 * e1 - e2
    out

f_tema(_src, _len) =>
    ema1 = ta.ema(_src, _len)
    ema2 = ta.ema(ema1, _len)
    ema3 = ta.ema(ema2, _len)
    out = 3 * (ema1 - ema2) + ema3
    out

f_wma(_src, _len) =>
    out = ta.wma(_src, _len)
    out

f_smma(_src, _len) =>
    smma = 0.0
    smma := na(smma[1]) ? ta.sma(_src, _len) : (smma[1] * (_len - 1) + _src) / _len
    smma

f_lsma(_src, _len) =>
    out = ta.linreg(_src, _len, 0)
    out

f_hullma(_src, _len) =>
    out = ta.wma(2 * ta.wma(_src, _len / 2) - ta.wma(_src, _len), math.floor(math.sqrt(_len)))
    out

f_alma(_src, _len) =>
    out = ta.alma(_src, _len, alma_offset, alma_sigma)
    out

f_average(_type, _src, _len) =>
    if _type == SMA
        f_sma(_src, _len)
    else if _type == EMA
        f_ema(_src, _len)
    else if _type == DEMA
        f_dema(_src, _len)
    else if _type == TEMA
        f_tema(_src, _len)
    else if _type == WMA
        f_wma(_src, _len)
    else if _type == SMMA
        f_smma(_src, _len)
    else if _type == LSMA
        f_lsma(_src, _len)
    else if _type == HMA
        f_hullma(_src, _len)
    else if _type == ALMA
        f_alma(_src, _len)

f_apply_type(_type) =>
    type_out = i_same_params ? i_type_all : _type
    type_out

f_apply_src(_src) =>
    src_out = i_same_params ? i_src_all : _src
    src_out

f_apply_offset(_offset) =>
    offset_out = i_same_params ? i_offset_all : _offset
    offset_out

//-----------------------------------------------------------
// Calculations
//-----------------------------------------------------------
if i_show_avg_1
    calc_1 := f_average(f_apply_type(i_type_1), f_apply_src(i_src_1), i_length_1)
    calc_1
if i_show_avg_2
    calc_2 := f_average(f_apply_type(i_type_2), f_apply_src(i_src_2), i_length_2)
    calc_2
if i_show_avg_3
    calc_3 := f_average(f_apply_type(i_type_3), f_apply_src(i_src_3), i_length_3)
    calc_3
if i_show_avg_4
    calc_4 := f_average(f_apply_type(i_type_4), f_apply_src(i_src_4), i_length_4)
    calc_4
if i_show_avg_5
    calc_5 := f_average(f_apply_type(i_type_5), f_apply_src(i_src_5), i_length_5)
    calc_5
if i_show_avg_6
    calc_6 := f_average(f_apply_type(i_type_6), f_apply_src(i_src_6), i_length_6)
    calc_6
if i_show_avg_7
    calc_7 := f_average(f_apply_type(i_type_7), f_apply_src(i_src_7), i_length_7)
    calc_7
if i_show_avg_8
    calc_8 := f_average(f_apply_type(i_type_8), f_apply_src(i_src_8), i_length_8)
    calc_8
if i_show_avg_9
    calc_9 := f_average(f_apply_type(i_type_9), f_apply_src(i_src_9), i_length_9)
    calc_9
if i_show_avg_10
    calc_10 := f_average(f_apply_type(i_type_10), f_apply_src(i_src_10), i_length_10)
    calc_10

//-----------------------------------------------------------
// Plots
//-----------------------------------------------------------
plot_1 = plot(calc_1, color=close >= calc_1 ? i_color_bull_1 : i_color_bear_1, offset=f_apply_offset(i_offset_1), linewidth=1)
plot_2 = plot(calc_2, color=close >= calc_2 ? i_color_bull_2 : i_color_bear_2, offset=f_apply_offset(i_offset_2), linewidth=1)
plot_3 = plot(calc_3, color=close >= calc_3 ? i_color_bull_3 : i_color_bear_3, offset=f_apply_offset(i_offset_3), linewidth=1)
plot_4 = plot(calc_4, color=close >= calc_4 ? i_color_bull_4 : i_color_bear_4, offset=f_apply_offset(i_offset_4), linewidth=1)
plot_5 = plot(calc_5, color=close >= calc_5 ? i_color_bull_5 : i_color_bear_5, offset=f_apply_offset(i_offset_5), linewidth=1)
plot_6 = plot(calc_6, color=close >= calc_6 ? i_color_bull_6 : i_color_bear_6, offset=f_apply_offset(i_offset_6), linewidth=1)
plot_7 = plot(calc_7, color=close >= calc_7 ? i_color_bull_7 : i_color_bear_7, offset=f_apply_offset(i_offset_7), linewidth=1)
plot_8 = plot(calc_8, color=close >= calc_8 ? i_color_bull_8 : i_color_bear_8, offset=f_apply_offset(i_offset_8), linewidth=1)
plot_9 = plot(calc_9, color=close >= calc_9 ? i_color_bull_9 : i_color_bear_9, offset=f_apply_offset(i_offset_9), linewidth=1)
plot_10 = plot(calc_10, color=close >= calc_10 ? i_color_bull_10 : i_color_bear_10, offset=f_apply_offset(i_offset_10), linewidth=1)

//-----------------------------------------------------------
// Fills
//-----------------------------------------------------------
fill(plot_1, plot_2, color=i_fill ? color.new(calc_1 > calc_2 ? i_color_bull_1 : i_color_bear_2, 90) : na, transp=90)
fill(plot_2, plot_3, color=i_fill ? color.new(calc_2 > calc_3 ? i_color_bull_2 : i_color_bear_3, 90) : na, transp=90)
fill(plot_3, plot_4, color=i_fill ? color.new(calc_3 > calc_4 ? i_color_bull_3 : i_color_bear_4, 90) : na, transp=90)
fill(plot_4, plot_5, color=i_fill ? color.new(calc_4 > calc_5 ? i_color_bull_4 : i_color_bear_5, 90) : na, transp=90)
fill(plot_5, plot_6, color=i_fill ? color.new(calc_5 > calc_6 ? i_color_bull_5 : i_color_bear_6, 90) : na, transp=90)
fill(plot_6, plot_7, color=i_fill ? color.new(calc_6 > calc_7 ? i_color_bull_6 : i_color_bear_7, 90) : na, transp=90)
fill(plot_7, plot_8, color=i_fill ? color.new(calc_7 > calc_8 ? i_color_bull_7 : i_color_bear_8, 90) : na, transp=90)
fill(plot_8, plot_9, color=i_fill ? color.new(calc_8 > calc_9 ? i_color_bull_8 : i_color_bear_9, 90) : na, transp=90)
fill(plot_9, plot_10, color=i_fill ? color.new(calc_9 > calc_10 ? i_color_bull_9 : i_color_bear_10, 90) : na, transp=90)

